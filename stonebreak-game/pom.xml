<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.stonebreak</groupId>
        <artifactId>stonebreak-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>stonebreak-game</artifactId>
    <packaging>jar</packaging>

    <name>Stonebreak Game</name>
    <description>A 3D voxel-based sandbox game inspired by Minecraft</description>

    <dependencies>
        <!-- LWJGL core -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- LWJGL OpenGL -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-opengl</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-opengl</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- LWJGL GLFW for window creation -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-glfw</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-glfw</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- LWJGL STB for image loading -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-stb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-stb</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- LWJGL NanoVG for UI rendering -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-nanovg</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-nanovg</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- LWJGL OpenAL for audio -->
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-openal</artifactId>
        </dependency>
        <dependency>
            <groupId>org.lwjgl</groupId>
            <artifactId>lwjgl-openal</artifactId>
            <classifier>${lwjgl.natives}</classifier>
            <scope>runtime</scope>
        </dependency>
        
        <!-- Java OpenGL Math Library -->
        <dependency>
            <groupId>org.joml</groupId>
            <artifactId>joml</artifactId>
        </dependency>
        
        <!-- Jackson JSON library for texture definition parsing -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        
        <!-- LZ4 compression for binary save system -->
        <dependency>
            <groupId>org.lz4</groupId>
            <artifactId>lz4-java</artifactId>
            <version>1.8.0</version>
        </dependency>

        <!-- JUnit 5 for testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Mockito for mocking in tests -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Byte Buddy - override Mockito's version for Java 24 compatibility -->
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <version>1.15.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy-agent</artifactId>
            <version>1.15.11</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit Platform Suite for test suites -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-engine</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>-Dnet.bytebuddy.experimental=true</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.stonebreak.core.Main</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.stonebreak.core.Main</mainClass>
                    <options>
                        <!-- Enable native access for LWJGL modules (Java 21+ requirement, critical for Java 24+) -->
                        <option>--enable-native-access=ALL-UNNAMED</option>
                        <!-- Alternative: specific modules if needed -->
                        <!-- <option>enable-native-access=org.lwjgl,org.lwjgl.opengl,org.lwjgl.glfw,org.lwjgl.stb,org.lwjgl.nanovg,org.lwjgl.openal</option> -->
                        
                        <!-- Java 24+ compatibility flags -->
                        <option>--add-exports=java.base/sun.nio.ch=ALL-UNNAMED</option>
                        <option>--add-exports=java.base/sun.security.util=ALL-UNNAMED</option>
                        
                        <!-- Use ZGC for ultra-low latency gaming performance -->
                        <option>-XX:+UseZGC</option>
                        <option>-XX:+UnlockExperimentalVMOptions</option>
                        <!-- Enable generational ZGC for better allocation patterns -->
                        <option>-XX:+UseZGenerationalGC</option>
                        <!-- Increase heap size for better performance -->
                        <option>-Xms2g</option>
                        <option>-Xmx4g</option>
                        <!-- Optimize for consistent low-latency performance -->
                        <option>-XX:+UseLargePages</option>
                        <option>-XX:+UseTransparentHugePages</option>
                        <!-- Reduce allocation overhead -->
                        <option>-XX:+UseStringDeduplication</option>
                        <!-- Enable advanced JIT optimizations -->
                        <option>-XX:+UseCompressedOops</option>
                        <option>-XX:+UseCompressedClassPointers</option>
                        <!-- Optimize thread local allocation -->
                        <option>-XX:+UseTLAB</option>
                        <option>-XX:+ResizeTLAB</option>
                        <!-- Enable biased locking for better synchronization -->
                        <option>-XX:+UseBiasedLocking</option>
                        
                        <!-- Additional stability flags for native library interaction -->
                        <option>-Djava.library.path=.</option>
                        <option>-Dorg.lwjgl.util.Debug=true</option>
                        <option>-Dorg.lwjgl.util.NoChecks=false</option>
                    </options>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>